// <auto-generated />
using System;
using AngularProject.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AngularProject.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211012153244_Final")]
    partial class Final
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AngularProject.DAL.Models.AlbumEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("LabelId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.AlbumReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("AlbumReviews");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.ArtistEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.GenreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.GroupMemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Joined")
                        .HasColumnType("bit");

                    b.Property<bool>("Left")
                        .HasColumnType("bit");

                    b.Property<Guid>("MusicianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("MusicianId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.LabelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.MusicianEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Musicians");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.RecordingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.ToTable("Recordings");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.ReviewerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Joined")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.TrackReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Ranking")
                        .HasColumnType("int");

                    b.Property<Guid>("RecordingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecordingId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("TrackReviews");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.AlbumEntity", b =>
                {
                    b.HasOne("AngularProject.DAL.Models.ArtistEntity", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularProject.DAL.Models.LabelEntity", "Label")
                        .WithMany("Albums")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.AlbumReviewEntity", b =>
                {
                    b.HasOne("AngularProject.DAL.Models.AlbumEntity", "Album")
                        .WithMany("AlbumReviews")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularProject.DAL.Models.ReviewerEntity", "Reviewer")
                        .WithMany("AlbumReviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.GroupMemberEntity", b =>
                {
                    b.HasOne("AngularProject.DAL.Models.ArtistEntity", "Artist")
                        .WithMany("GroupMembers")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularProject.DAL.Models.MusicianEntity", "Musician")
                        .WithMany("GroupMembers")
                        .HasForeignKey("MusicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.RecordingEntity", b =>
                {
                    b.HasOne("AngularProject.DAL.Models.AlbumEntity", "Album")
                        .WithMany("Recordings")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularProject.DAL.Models.GenreEntity", "Genre")
                        .WithMany("Recordings")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.TrackReviewEntity", b =>
                {
                    b.HasOne("AngularProject.DAL.Models.RecordingEntity", "Recording")
                        .WithMany("TrackReviews")
                        .HasForeignKey("RecordingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AngularProject.DAL.Models.ReviewerEntity", "Reviewer")
                        .WithMany("TrackReviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recording");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.AlbumEntity", b =>
                {
                    b.Navigation("AlbumReviews");

                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.ArtistEntity", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.GenreEntity", b =>
                {
                    b.Navigation("Recordings");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.LabelEntity", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.MusicianEntity", b =>
                {
                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.RecordingEntity", b =>
                {
                    b.Navigation("TrackReviews");
                });

            modelBuilder.Entity("AngularProject.DAL.Models.ReviewerEntity", b =>
                {
                    b.Navigation("AlbumReviews");

                    b.Navigation("TrackReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
